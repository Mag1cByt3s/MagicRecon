#!/bin/bash

# Set workdir
WORKDIR=$(pwd)

log_info() {
    echo -e "\033[34m[INFO]\033[0m $1"
}

log_warn() {
    echo -e "\033[33m[WARN]\033[0m $1"
}

create_konsole_tab() {
    COMMAND=$1
    konsole --noclose --show-tabbar --new-tab --workdir "$WORKDIR" -e $SHELL -c "$COMMAND; exec $SHELL"
}

check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_warn "This script needs to be run as root or with sudo."
        exit 1
    fi
}

identify_web_ports() {
    nmap_output="$1"
    excluded_ports="5357,5985,593,47001,49674"
    web_ports=()

    while IFS= read -r line; do
        if [[ "$line" =~ (http|ssl/http) ]]; then
            port=$(echo "$line" | grep -oP '^\d+/tcp' | cut -d '/' -f 1)
            if ! echo "$excluded_ports" | grep -q "$port"; then
                web_ports+=("$port")
            fi
        fi
    done <<< "$nmap_output"

    echo "${web_ports[@]}"
}

feroxbuster_brute_force() {
    target="$1"
    web_ports="$2"
    feroxbuster_directory="$target/feroxbuster"
    wordlist="/usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"
    
    # Ensure the feroxbuster directory exists
    mkdir -p "$feroxbuster_directory"
    
    for port in $(echo "$web_ports" | tr ',' '\n'); do
        log_info "Running Feroxbuster on target: $target, port: $port"
        feroxbuster --no-state --url "http://$target:$port" --wordlist "$wordlist" --output "$feroxbuster_directory/$port.txt" --depth 4 --threads 40 --auto-tune --extract-links --insecure --extensions "html,htm,php,asp,aspx,jsp" --filter-status "404,405,503,502,411,403,501,400" --methods "GET,POST,PUT" --filter-size 0 --filter-words 0
    done
}

run_whatweb() {
    target="$1"
    web_ports="$2"
    whatweb_directory="$target/whatweb"
   
    # Ensure the whatweb directory exists
    mkdir -p "$whatweb_directory"
    
    for port in $(echo "$web_ports" | tr ',' '\n'); do
        log_info "Running whatweb on target: $target, port: $port"
        whatweb -v -a 3 --no-errors "http://$target:$port" --log-verbose="$whatweb_directory/$port.txt"
    done
}

fetch_robots_txt() {
    target="$1"
    port="$2"
    url="http://$target:$port/robots.txt"

    log_info "Checking for robots.txt at $url"

    # Use curl to fetch the robots.txt file
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url")

    if [ "$response" -eq 200 ]; then
        log_info "Found robots.txt on $target:$port"
        curl -s "$url"
    else
        log_info "No robots.txt found on $target:$port"
    fi
}

main() {
    # Ensure the script is run as root
    check_root

    target="$1"
    nmap_directory="$target/nmap"
    
    # Ensure the nmap directory exists
    mkdir -p "$nmap_directory"
    
    # Run the initial Nmap scan to find open ports
    log_info "Running initial Nmap scan on target: $target"
    open_ports=$(sudo nmap -p- --min-rate=1000 -T4 "$target" | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed 's/,$//')
    
    if [ -z "$open_ports" ]; then
        log_info "No open ports found."
        return
    fi
    
    log_info "Detected open ports: $open_ports"
    
    # Run the detailed Nmap scan on the detected open ports and capture output
    detailed_nmap_command="sudo nmap -sC -sV --version-all -O -p$open_ports -oN $nmap_directory/nmap_$target.txt -vvv $target"
    detailed_nmap_output=$(eval "$detailed_nmap_command")
    log_info "Detailed Nmap scan completed."
    
    # Identify web ports from the detailed Nmap scan output
    web_ports=$(identify_web_ports "$detailed_nmap_output")
    log_info "Identified web server ports (excluding certain ports): $web_ports"

    # Fetch robots.txt on identified web ports
    for port in $(echo "$web_ports"); do
        fetch_robots_txt "$target" "$port"
    done
    
    # Run Feroxbuster in a new Konsole tab
    ferox_command="$(declare -f log_info); $(declare -f feroxbuster_brute_force); feroxbuster_brute_force $target \"$web_ports\""
    create_konsole_tab "$ferox_command"
    
    # Run WhatWeb in a new Konsole tab
    whatweb_command="$(declare -f log_info); $(declare -f run_whatweb); run_whatweb $target \"$web_ports\""
    create_konsole_tab "$whatweb_command"
}

main "$@"
